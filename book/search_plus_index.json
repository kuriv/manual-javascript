{"./":{"url":"./","title":"JavaScript","keywords":"","body":"JavaScript JavaScript 是一种具有函数优先的轻量级、解释型、即时编译型的编程语言。 最初是作为开发 Web 页面的脚本语言，但随着语言标准的推行，它也被用于很多非浏览器环境。 "},"docs/开始使用.html":{"url":"docs/开始使用.html","title":"开始使用","keywords":"","body":"开始使用 执行下面的代码，输出指定的内容。 document.write('Hello World!'); alert('Hello World!'); console.log('Hello World!'); let num = 233; document.write(`${num}`) "},"docs/变量声明.html":{"url":"docs/变量声明.html","title":"变量声明","keywords":"","body":"变量声明 执行下面的代码，声明变量并为其赋值。 let num; num = 233; console.log(num); 也可以在声明变量时直接完成初始化赋值操作。 let num = 233; console.log(233); 还可以一次性声明多个变量并为其赋值。 let num = 233, str = 'Hello World!'; console.log(num, str); 执行下面的代码，使用解构语法为变量赋值。 let [num1, num2, num3] = [1, 2, 3]; console.log(num1); console.log(num2); console.log(num3); 执行下面的代码，交换两个变量的值。 let num1 = 233; let num2 = 666; [num1, num2] = [num2, num1]; console.log(num1, num2); "},"docs/常量声明.html":{"url":"docs/常量声明.html","title":"常量声明","keywords":"","body":"常量声明 常量在声明时必须进行初始化，并且不允许对其重新赋值。 const num = 233; console.log(num); "},"docs/基本数据类型.html":{"url":"docs/基本数据类型.html","title":"基本数据类型","keywords":"","body":"基本数据类型 JavaScript 中的基本数据类型主要包括数值类型、字符串类型、布尔类型、未定义类型、空类型。 let num = 233; console.log(num, typeof num); let str = 'Hello World!'; console.log(str, typeof str); let bool = true; console.log(bool, typeof bool); let undef; console.log(undef, typeof undef); let NULL = null; console.log(NULL, typeof NULL); "},"docs/引用数据类型.html":{"url":"docs/引用数据类型.html","title":"引用数据类型","keywords":"","body":"引用数据类型 JavaScript 中的引用数据类型主要包括数组类型、对象类型、函数类型。 let arr = [1, 2, 3]; console.log(arr, typeof arr); let obj = {}; console.log(obj, typeof obj); function func() { return 233; } console.log(func, typeof func); "},"docs/类型转换.html":{"url":"docs/类型转换.html","title":"类型转换","keywords":"","body":"类型转换 执行下面的代码，将字符串类型强制显式转换为数值类型。 let str = '233'; console.log(str, typeof str); console.log(Number(str), typeof Number(str)); "},"docs/数组操作.html":{"url":"docs/数组操作.html","title":"数组操作","keywords":"","body":"数组操作 执行下面的代码，循环打印数组中所有元素。 let arr = [233, 6.66, 'Hello World!', false]; console.log(arr); for (let i = 0; i 执行下面的代码，向数组末尾添加新的元素。 let arr = [233, 6.66, 'Hello World!', false]; console.log(arr); arr.push('123.456', 'Hello JavaScript!'); console.log(arr); 执行下面的代码，向数组开头添加新的元素。 let arr = [233, 6.66, 'Hello World!', false]; console.log(arr); arr.unshift('123.456', 'Hello JavaScript!'); console.log(arr); 执行下面的代码，删除数组中最后一个元素。 let arr = [233, 6.66, 'Hello World!', false]; console.log(arr); console.log(arr.pop()); console.log(arr); 执行下面的代码，删除数组中第一个元素。 let arr = [233, 6.66, 'Hello World!', false]; console.log(arr); console.log(arr.shift()); console.log(arr); 执行下面的代码，截取数组中指定下标的元素。 let arr = [233, 6.66, 'Hello World!', false]; console.log(arr); console.log(arr.slice(1, 4)); 执行下面的代码，遍历数组处理数据并返回新的数组。 const arr1 = [1, 2, 3]; const arr2 = arr1.map(function(ele, index) { console.log(index, ele); return ele * 2; }); console.log(arr1); console.log(arr2); 执行下面的代码，将数组中所有元素转换为字符串。 const arr = [1, 2, 3]; const str = arr.join(); console.log(arr); console.log(str); "},"docs/函数功能.html":{"url":"docs/函数功能.html","title":"函数功能","keywords":"","body":"函数功能 执行下面的代码，定义并调用指定函数。 function func() { return 233; } console.log(func()); 执行下面的代码，计算两个整数之和。 function sum(x, y) { return x + y; } console.log(sum(233, 666)); 执行下面的代码，为函数指定默认参数。 function sum(x = 0, y = 0) { return x + y; } console.log(sum(233, 666)); console.log(sum()); 执行下面的代码，获取函数的剩余参数。 function func1() { console.log(arguments); } func1(1, 2, 3); function func2(...args) { console.log(args); } func2(1, 2, 3); 执行下面的代码，定义并调用匿名函数。 let func1 = function() { return 233; } let func2 = function(x, y) { return x + y; } console.log(func1()); console.log(func2(233, 666)); 执行下面的代码，定义并调用立即执行函数。 (function() { console.log('Hello World!'); })(); (function(x, y) { console.log(x + y); })(233, 666); 执行下面的代码，定义并调动定时器函数。 let timer1 = setTimeout(function() { console.log('Hello World!'); }, 3000); let timer2 = setInterval(function() { console.log('Hello JavaScript!'); }, 3000); function func() { console.log(233); } let timer3 = setInterval(func, 3000); 执行下面的代码，定义并调用闭包函数。 function outer() { let num = 233; function inner() { console.log(num); } return inner; } const func = outer(); func(); 执行下面的代码，定义并调用箭头函数。 const func1 = () => { console.log('Hello World!'); } func1(); const func2 = num => { console.log(num); } func2(233); const func3 = num => console.log(num); func3(666); const func4 = num => num * 2; console.log(func4(1.23)); "},"docs/对象使用.html":{"url":"docs/对象使用.html","title":"对象使用","keywords":"","body":"对象使用 执行下面的代码，声明对象并访问其属性。 let obj = { name: 'Tom', age: 18, 'user-name': 'Tom' }; console.log(obj); console.log(obj.name); console.log(obj.age); console.log(obj['user-name']); 执行下面的代码，删除对象中的指定属性。 let obj = { name: 'Tom', age: 18 }; console.log(obj); delete obj.name; console.log(obj); console.log(obj.name); 执行下面的代码，声明对象并访问其方法。 let obj = { func: function() { return 'Hello World!'; } }; console.log(obj); console.log(obj.func()); 执行下面的代码，遍历对象中的所有属性与方法。 let obj = { name: 'Tom', age: 18, func: function() { return 'Hello World!'; } }; console.log(obj); for (let k in obj) { console.log(k); console.log(obj[k]); } 执行下面的代码，使用解构语法为变量赋值。 let obj = { name: 'Tom', age: 18 }; let {name, age} = obj; console.log(name); console.log(age); 构造函数是一种特殊的函数，主要用来初始化对象。 function Person(name, age) { this.name = name; this.age = age; } const Tom = new Person('Tom', 20); const Jerry = new Person('Jerry', 18); console.log(Tom); console.log(Jerry); 构造函数的属性和方法被称为静态属性和静态方法。 function Person() {} Person.username = 'anonymous'; Person.call = function() { console.log('Hello World!'); } console.log(Person.username); Person.call(); 在 JavaScript 中所有构造函数中都存在一个原型对象。 function Person(name, age) { this.name = name; this.age = age; } Person.prototype.call = function() { console.log('Hello World!'); } const Tom = new Person('Tom', 20); const Jerry = new Person('Jerry', 18); console.log(Tom); Tom.call(); console.log(Jerry); Jerry.call() Math 对象中包含了 JavaScript 提供的一系列数学运算方法。 console.log(Math.random()); console.log(Math.ceil(3.7)); console.log(Math.floor(3.7)); console.log(Math.max(1, 2, 3)); console.log(Math.min(1, 2, 3)); console.log(Math.pow(3, 2)); console.log(Math.abs(-233)); Date 对象中包含了 JavaScript 提供的一系列日期操作方法。 const date = new Date(); console.log(date); console.log(date.getFullYear()); console.log(date.getMonth()); console.log(date.getDay()); console.log(date.getHours()); console.log(date.getMinutes()); console.log(date.getSeconds()); console.log(Date.now()); 执行下面的代码，控制浏览器前进与后退。 history.back(); history.forward(); "},"docs/DOM.html":{"url":"docs/DOM.html","title":"DOM","keywords":"","body":"DOM 文档对象模型是用来呈现以及与任意 HTML 或 XML 文档交互的 API 。执行下面的代码，查找并获取符合条件的指定 DOM 元素。 JavaScript Hello World! Hello JavaScript! 1 2 3 const nav = document.querySelector('#nav'); console.log(nav); const box = document.querySelector('.box'); console.log(box); const li = document.querySelector('ul li'); console.log(li); const li1 = document.querySelector('ul li:first-child'); console.log(li1); 执行下面的代码，查找并获取符合条件的所有 DOM 元素。 JavaScript 1 2 3 const li = document.querySelectorAll('ul li'); console.log(li); 执行下面的代码，使用其他方式获取 DOM 元素。 JavaScript Hello World! Hello JavaScript! Hello JavaScript! 1 2 3 const nav = document.getElementById('nav'); console.log(nav); const box = document.getElementsByClassName('box'); console.log(box); const li = document.getElementsByTagName('li'); console.log(li); 执行下面的代码，修改指定 DOM 元素中的 HTML 内容。 JavaScript Hello World! const nav = document.querySelector('#nav'); console.log(nav); nav.innerHTML = 'Hello JavaScript!'; 执行下面的代码，修改指定 DOM 元素的 CSS 属性。 JavaScript Hello World! const box = document.querySelector('.box'); box.style.color = 'red'; 执行下面的代码，修改指定 DOM 元素的类名。 JavaScript Hello World! const box = document.querySelector('.box'); console.log(box.className); box.className = 'nav'; console.log(box.className); 执行下面的代码，操作指定 DOM 元素的类名。 JavaScript .nav { color: red; } Hello World! const box = document.querySelector('.box'); console.log(box.className); box.classList.add('nav'); console.log(box.className); box.classList.remove('box'); console.log(box.className); box.classList.toggle('box'); console.log(box.className); 执行下面的代码，修改指定 DOM 元素的自定义属性。 JavaScript Hello World! const box = document.querySelector('.box'); console.log(box.dataset); console.log(box.dataset.id); 执行下面的代码，查找指定 DOM 元素的父节点。 JavaScript const box = document.querySelector('.box'); console.log(box.parentNode); 执行下面的代码，查找指定 DOM 元素的所有子节点。 JavaScript 1 2 3 const ul = document.querySelector('ul'); console.log(ul.children); 执行下面的代码，查找指定 DOM 元素的兄弟节点。 JavaScript 1 2 3 const li = document.querySelector('.li'); console.log(li.previousElementSibling); console.log(li.nextElementSibling); 执行下面的代码，创建新的 DOM 节点并插入。 JavaScript 1 2 3 const div = document.createElement('div'); document.body.appendChild(div); const ul = document.querySelector('ul'); const p = document.createElement('p'); ul.insertBefore(p, ul.children[0]); 执行下面的代码，克隆指定节点并插入。 JavaScript 1 2 3 const div = document.querySelector('div'); const ul = document.querySelector('ul'); const new_ul = ul.cloneNode(true); div.appendChild(new_ul); 执行下面的代码，删除指定节点。 JavaScript 1 2 3 const ul = document.querySelector('ul'); ul.removeChild(ul.children[0]); "},"docs/事件监听.html":{"url":"docs/事件监听.html","title":"事件监听","keywords":"","body":"事件监听 执行下面的代码，监听元素的点击事件。 JavaScript Click const btn = document.querySelector('button'); btn.addEventListener('click', function() { console.log('Hello World!'); }); 还可以为同一个元素绑定多个相同类型的监听事件。 JavaScript Click const btn = document.querySelector('button'); btn.addEventListener('click', function() { console.log('Hello World!'); }); btn.addEventListener('click', function() { console.log('Hello JavaScript!'); }); 执行下面的代码，监听元素的鼠标移动事件。 JavaScript .box { width: 500px; height: 500px; background-color: red; } Hello World! const box = document.querySelector('.box'); box.addEventListener('mouseenter', function() { console.log('enter'); }); box.addEventListener('mouseleave', function() { console.log('leave'); }); 执行下面的代码，监听表单的输入操作事件。 JavaScript const input = document.querySelector('input'); input.addEventListener('keydown', function() { console.log('down'); }); input.addEventListener('keyup', function(e) { console.log('up'); console.log(e.key); }); 事件冒泡是指当一个元素的事件被触发时，同样的事件将会在该元素的所有祖先元素中依次被触发。 JavaScript Hello World! const box1 = document.querySelector('.box1'); box1.addEventListener('click', function() { console.log('box1'); }); const box2 = document.querySelector('.box2'); box2.addEventListener('click', function() { console.log('box2'); }); const box3 = document.querySelector('.box3'); box3.addEventListener('click', function() { console.log('box3'); }); 执行下面的代码，阻止冒泡事件。 JavaScript Hello World! const box1 = document.querySelector('.box1'); box1.addEventListener('click', function() { console.log('box1'); }); const box2 = document.querySelector('.box2'); box2.addEventListener('click', function() { console.log('box2'); }); const box3 = document.querySelector('.box3'); box3.addEventListener('click', function(e) { console.log('box3'); e.stopPropagation(); }); 执行下面的代码，利用事件冒泡实现事件委托。 JavaScript 1 2 3 Hello World! const ul = document.querySelector('ul'); ul.addEventListener('click', function(e) { if (e.target.tagName === 'LI') { e.target.style.color = 'red'; } }); 执行下面的代码，阻止元素的默认行为。 JavaScript Click const form = document.querySelector('form'); form.addEventListener('submit', function(e) { e.preventDefault(); }); const a = document.querySelector('a'); a.addEventListener('click', function(e) { e.preventDefault(); }); 执行下面的代码，监听页面加载事件。 JavaScript window.addEventListener('load', function() { console.log('Hello JavaScript!'); }); document.addEventListener('DOMContentLoaded', function() { console.log('Hello World!'); }); 执行下面的代码，监听页面滚动事件。 JavaScript .box { height: 5000px; } window.addEventListener('scroll', function() { console.log('scroll'); }); 执行下面的代码，监听窗口尺寸改变事件。 JavaScript window.addEventListener('resize', function() { console.log('resize'); }); 执行下面的代码，监听移动端事件。 JavaScript document.addEventListener('touchstart', function() { console.log('touchstart'); }); document.addEventListener('touchmove', function() { console.log('touchmove'); }); document.addEventListener('touchend', function() { console.log('touchend'); }); 执行下面的代码，解绑元素的监听事件。 JavaScript Click function func() { console.log('Hello World!'); } const btn = document.querySelector('button'); btn.addEventListener('click', func); btn.removeEventListener('click', func); "},"docs/本地存储.html":{"url":"docs/本地存储.html","title":"本地存储","keywords":"","body":"本地存储 使用本地存储功能可以将数据存储到用户浏览器中。 localStorage.setItem('name', 'Tom'); localStorage.setItem('age', 20); console.log(localStorage.getItem('name')); console.log(localStorage.getItem('age')); 存储复杂数据类型时，需要将数据转换为 JSON 字符串形式。 let obj = { name: 'Tom', age: 20 } localStorage.setItem('obj', JSON.stringify(obj)); console.log(localStorage.getItem('obj')); console.log(JSON.parse(localStorage.getItem('obj'))); "}}