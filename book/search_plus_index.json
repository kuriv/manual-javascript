{"./":{"url":"./","title":"JavaScript","keywords":"","body":"JavaScript JavaScript 是一种具有函数优先的轻量级、解释型、即时编译型的编程语言。 最初是作为开发 Web 页面的脚本语言，但随着语言标准的推行，它也被用于很多非浏览器环境。 "},"docs/开始使用.html":{"url":"docs/开始使用.html","title":"开始使用","keywords":"","body":"开始使用 执行下面的代码，输出指定的内容。 document.write('Hello World!'); alert('Hello World!'); console.log('Hello World!'); let num = 233; document.write(`${num}`) "},"docs/变量声明.html":{"url":"docs/变量声明.html","title":"变量声明","keywords":"","body":"变量声明 执行下面的代码，声明变量并为其赋值。 let num; num = 233; console.log(num); 也可以在声明变量时直接完成初始化赋值操作。 let num = 233; console.log(233); 还可以一次性声明多个变量并为其赋值。 let num = 233, str = 'Hello World!'; console.log(num, str); "},"docs/常量声明.html":{"url":"docs/常量声明.html","title":"常量声明","keywords":"","body":"常量声明 常量在声明时必须进行初始化，并且不允许对其重新赋值。 const num = 233; console.log(num); "},"docs/基本数据类型.html":{"url":"docs/基本数据类型.html","title":"基本数据类型","keywords":"","body":"基本数据类型 JavaScript 中的基本数据类型主要包括数值类型、字符串类型、布尔类型、未定义类型、空类型。 let num = 233; console.log(num, typeof num); let str = 'Hello World!'; console.log(str, typeof str); let bool = true; console.log(bool, typeof bool); let undef; console.log(undef, typeof undef); let NULL = null; console.log(NULL, typeof NULL); "},"docs/引用数据类型.html":{"url":"docs/引用数据类型.html","title":"引用数据类型","keywords":"","body":"引用数据类型 JavaScript 中的引用数据类型主要包括数组类型、对象类型、函数类型。 let arr = [1, 2, 3]; console.log(arr, typeof arr); let obj = {}; console.log(obj, typeof obj); function func() { return 233; } console.log(func, typeof func); "},"docs/类型转换.html":{"url":"docs/类型转换.html","title":"类型转换","keywords":"","body":"类型转换 执行下面的代码，将字符串类型强制显式转换为数值类型。 let str = '233'; console.log(str, typeof str); console.log(Number(str), typeof Number(str)); "},"docs/数组操作.html":{"url":"docs/数组操作.html","title":"数组操作","keywords":"","body":"数组操作 执行下面的代码，循环打印数组中所有元素。 let arr = [233, 6.66, 'Hello World!', false]; console.log(arr); for (let i = 0; i 执行下面的代码，向数组末尾添加新的元素。 let arr = [233, 6.66, 'Hello World!', false]; console.log(arr); arr.push('123.456', 'Hello JavaScript!'); console.log(arr); 执行下面的代码，向数组开头添加新的元素。 let arr = [233, 6.66, 'Hello World!', false]; console.log(arr); arr.unshift('123.456', 'Hello JavaScript!'); console.log(arr); 执行下面的代码，删除数组中最后一个元素。 let arr = [233, 6.66, 'Hello World!', false]; console.log(arr); console.log(arr.pop()); console.log(arr); 执行下面的代码，删除数组中第一个元素。 let arr = [233, 6.66, 'Hello World!', false]; console.log(arr); console.log(arr.shift()); console.log(arr); 执行下面的代码，截取数组中指定下标的元素。 let arr = [233, 6.66, 'Hello World!', false]; console.log(arr); console.log(arr.slice(1, 4)); "},"docs/函数功能.html":{"url":"docs/函数功能.html","title":"函数功能","keywords":"","body":"函数功能 执行下面的代码，定义并调用指定函数。 function func() { return 233; } console.log(func()); 执行下面的代码，计算两个整数之和。 function sum(x, y) { return x + y; } console.log(sum(233, 666)); 执行下面的代码，为函数指定默认参数。 function sum(x = 0, y = 0) { return x + y; } console.log(sum(233, 666)); console.log(sum()); 执行下面的代码，定义并调用匿名函数。 let func1 = function() { return 233; } let func2 = function(x, y) { return x + y; } console.log(func1()); console.log(func2(233, 666)); 执行下面的代码，定义并调用立即执行函数。 (function() { console.log('Hello World!'); })(); (function(x, y) { console.log(x + y); })(233, 666); "},"docs/对象使用.html":{"url":"docs/对象使用.html","title":"对象使用","keywords":"","body":"对象使用 执行下面的代码，声明对象并访问其属性。 let obj = { name: 'Tom', age: 18, 'user-name': 'Tom' }; console.log(obj); console.log(obj.name); console.log(obj.age); console.log(obj['user-name']); 执行下面的代码，删除对象中的指定属性。 let obj = { name: 'Tom', age: 18 }; console.log(obj); delete obj.name; console.log(obj); console.log(obj.name); "}}